<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>构建属于自己的项目</title>
      <link href="/zh-CN/e6d6f9e7.html"/>
      <url>/zh-CN/e6d6f9e7.html</url>
      
        <content type="html"><![CDATA[<p>本章主要针对“如何构建一个属于自己的计算机视觉项目”为主题进行展开。</p><p>本章导航：</p><ul><li>在 GitHub 上创建个人项目</li><li>将<strong>远程仓库</strong>与个人项目建立联系</li><li>利用 Git 子模块组织子项目</li></ul><h2 id="1-创建个人项目"><a href="#1-创建个人项目" class="headerlink" title="1 创建个人项目"></a>1 创建个人项目</h2><p>由于构建个人或者公司的私有服务器涉及的知识点太多，本文考虑以 GitHub 作为远端服务器来构建个人项目。如果您的私有服务器已经搭建好了的话，直接把它当作 GitHub 进行操作即可。因而，本文介绍的创建项目的方法同样适用于私有服务器，区别不过是您提供的服务器的地址不同和仓库的使用权限不同而已。</p><h3 id="1-1-搭建本地仓库"><a href="#1-1-搭建本地仓库" class="headerlink" title="1.1 搭建本地仓库"></a>1.1 搭建本地仓库</h3><p>第 1 步：在 GitHub（<a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a>）上创建一个仓库，取名为 <strong>cv-actions</strong>，接着选择 <code>settings</code>：</p><p><img src="/zh-CN/e6d6f9e7/set.png" alt="图1 GitHub 的 settings"></p><p>往下滑动鼠标，找到 GitHub Pages，选择主题，随后便会生成一个网址：</p><p><img src="/zh-CN/e6d6f9e7/GithubPages.png" alt="图2 GitHub Pages"></p><p>接着，填写项目的简介：</p><p><img src="/zh-CN/e6d6f9e7/edit.png" alt="图 3 编写项目简介"></p><p>第 2 步：将远端的项目克隆到本地。首先，按照下图操作获取项目的远程仓库地址：</p><p><img src="/zh-CN/e6d6f9e7/clone.png" alt="图4 获取远程仓库地址"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机视觉入门必备工具</title>
      <link href="/zh-CN/ad2d8036.html"/>
      <url>/zh-CN/ad2d8036.html</url>
      
        <content type="html"><![CDATA[<p>随着 GPU 和大量优质数据的出现，深度学习技术在计算机视觉任务中扮演着越来越重要的角色。深度学习技术的端到端的模式大大简化了特征工程的工作量，为提取更加有效的特征提供了一个泛化性更强的工具。故而，学习深度学习技术是计算机视觉任务的不二之选。</p><p>一般地，学习深度学习技术需要具备以下能力：</p><ul><li>编程语言：当前，大多数深度学习框架均以 Python 为主流编程语言。您可以阅读 Python 官方教程：<a href="https://docs.python.org/zh-cn/3/" target="_blank" rel="noopener">中文 Python</a>。</li><li>版本控制：一个深度学习项目不是一天建成，需要不断的调试和修复，因而学习<strong>版本控制</strong>是十分重要的任务。本文仅仅介绍 Git。</li><li>解读和使用优质的 GitHub 资源：如果所有的项目都从零开始构建是完全没有必要的，将项目建立在优秀的 GitHub 项目的基础上，继续开发，将会为您节省大量的时间和经历。本文将详细介绍如何使用 GitHub 资源。</li></ul><h2 id="1-Git-基础"><a href="#1-Git-基础" class="headerlink" title="1 Git 基础"></a>1 Git 基础</h2><p><img src="http://justinhileman.info/article/git-pretty/git-pretty.png" alt="git 速查表"></p><p>Git 学习资源：</p><ul><li><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noopener">Git 基础：Pro Git</a></li><li><a href="https://git-scm.com/doc/ext" target="_blank" rel="noopener">Git 进阶</a></li><li>PDF 版命令手册：<a href="https://github.github.com/training-kit/downloads/github-git-cheat-sheet.pdf" target="_blank" rel="noopener">github-git-cheat-sheet.pdf</a></li><li>Git 完整命令手册地址：<a href="http://git-scm.com/docs" target="_blank" rel="noopener">http://git-scm.com/docs</a></li><li><a href="http://marklodato.github.io/visual-git-guide/index-zh-cn.html" target="_blank" rel="noopener">图解 Git</a></li></ul><p>所谓的<strong>版本控制</strong>，就是用来记录文件内容的变动，方便未来查询和恢复文件的内容修订的一种系统。版本控制的工具有很多，但是，我比较倾向于 Git。因为 Git 是<strong>分布式的</strong>，即使服务器上的版本库坏掉了，您也可以从其他非服务器的电脑上进行版本更新。</p><blockquote><p>并不只提取最新版本的文件快照，而是把代码仓库完整地镜像下来。 这么一来，任何一处协同工作用的服务器发生故障，事后都可以用任何一个镜像出来的本地仓库恢复。 因为每一次的克隆操作，实际上都是一次对代码仓库的完整备份。—— 《Git Pro》</p></blockquote><p>您完全不用担心把文件玩坏，因为版本控制已经帮你准备好了时光机器，借由版本控制您可以追溯文件的前世、今生以及未来，文件的时间轴完全由您掌控，甚至于，您可以借助 Git 的<strong>分支</strong>跳跃不同的“平行宇宙”。</p><p>Git 数据库中保存的信息都是以<strong>文件内容的哈希值</strong>来索引，而不是文件名。Git 有三种状态：已提交（committed）、已修改（modified）和已暂存（staged）。</p><ul><li><strong>已提交</strong>表示数据已经安全的保存在本地<strong>Git 仓库目录</strong>（即 <code>.git</code> 目录，<em>是 Git 用来保存项目的元数据和对象数据库的地方。 供其它计算机克拷贝的数据。</em>）中。</li><li><strong>已修改</strong>表示修改了文件，但还没保存到<strong>Git 仓库目录</strong>中。</li><li><strong>已暂存</strong>表示在<strong>工作目录</strong>（即您磁盘上存储的你看到的数据）对一个已修改文件的当前版本做了标记（即记录在 <code>.git/index</code> 中，一般地，将其称为<strong>暂存区域</strong>），使之包含在下次提交的快照中。</li></ul><h3 id="1-1-配置用户信息"><a href="#1-1-配置用户信息" class="headerlink" title="1.1 配置用户信息"></a>1.1 配置用户信息</h3><p>一般情况下，安装好 Git 之后需要您配置用户信息，用于记录提交者的信息。</p><pre class="line-numbers language-sh"><code class="language-sh">$ git config --global user.name 用户名$ git config --global user.email 邮箱<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>配置好了用户信息，之后您便可以使用 Git 了。如果您不知道某一个命令如何使用，您可以使用 <code>git help</code> 来获取帮助，比如：</p><pre class="line-numbers language-sh"><code class="language-sh">$ git help config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>您便轻松的获取 <code>git config</code> 的离线帮助文档。</p><h3 id="1-2-创建并操作一个本地仓库"><a href="#1-2-创建并操作一个本地仓库" class="headerlink" title="1.2 创建并操作一个本地仓库"></a>1.2 创建并操作一个本地仓库</h3><p>创建一个本地仓库，只需要您在工作目录下使用命令 <code>git init</code> 即可。此命令会在工作目录的根目录下创建 <code>.git</code> 目录，即本地的 Git 仓库。但是，此时，您的 Git 本地仓库是空的，我们需要将工作目录中的文件加入 Git 的跟踪：</p><p><img src="/zh-CN/ad2d8036/init.png" alt="git init"></p><p>命令 <code>git add .</code> 将工作目录的所有文件由未跟踪状态转换为跟踪状态，并存储在暂存区（注意，这里说“存储”并不准确，应该说是将文件的内容的指针放入 <code>.git/index</code> 中进行存储），以备下次提交。如果您仅仅只需要跟踪 <code>A.md</code>，那么您可以这样：</p><pre class="line-numbers language-sh"><code class="language-sh">$ git add A.md<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>vscode（一个十分强大的编辑器） 可以显示追踪的状态：</p><p><img src="/zh-CN/ad2d8036/add.png" alt="git add"></p><p>为了查看文件存储的状态，您可以使用 <code>git staus -s</code>：</p><p><img src="/zh-CN/ad2d8036/modify.png" alt="git status"></p><p><code>git status</code> 仅仅可以看出文件级别的（与暂存区的）不同状态，而如果您想要获悉文件的内容之间的不同，可以使用 <code>git diff</code> 获取工作目录中当前文件和暂存区域快照之间的差异：</p><p><img src="/zh-CN/ad2d8036/diff.png" alt="git diff"></p><p><code>git diff</code> 本身只显示尚未暂存的改动，而不是自上次提交以来所做的所有改动，若要查看已暂存的将要添加到下次提交里的内容，可以用 <code>git diff --staged</code> 命令；命令 <code>git diff --check</code> 可以用来检测可能存在由空白符引起的问题；Git 的 <code>...</code> 语法：<code>git diff A...B</code> 用于查找分支 A 同 A 与 B 的共同跟节点的不同，可看图理解：</p><p><img src="/zh-CN/ad2d8036/diffAB.png" alt="git diff A...B"></p><p>您总会有一些文件不希望被 Git 追踪（比如一些机密文件），此时您可以创建文件 <code>.gitignore</code> 并将那些不希望被追踪的文件名称写入到 <code>.gitignore</code> 中（在 <a href="https://github.com/github/gitignore" target="_blank" rel="noopener">https://github.com/github/gitignore</a> 中提供了一些 <code>.gitignore</code> 模板可供参考）。文件 <code>.gitignore</code> 的格式规范如下：</p><ul><li>所有空行或者以 <code>#</code> 开头的行都会被 Git 忽略。</li><li>可以使用标准的 glob 模式匹配。</li><li>以（<code>/</code>）开头防止递归。</li><li>以（<code>/</code>）结尾指定目录。</li><li>惊叹号（<code>!</code>）取反要忽略指定模式以外的文件或目录。</li></ul><p>当您通过 <code>git status</code> 查看文件的状态为均已经暂存时，您便可以使用 <code>git commit -m "提交的信息"</code> 命令将所有通过 git add 暂存的文件内容在数据库中创建一个持久的快照，然后将当前分支上的分支指针（即 HEAD）移到其之上。提交时记录的是放在暂存区域的快照，并以 SHA-1 校验码进行标识方便之后的版本转换。更多命令可以由下图解读：</p><pre class="line-numbers language-mermaid"><code class="language-mermaid">graph LRA(History) --git reset -- files--> B(Staged)B --git checkout -- files--> C(Working Directory)B --git commit -m --> AC --git add files--> BC --git commit -a -m --> AA --git checkout HEAD -- files--> C<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果您已经做了多次提交，那么 Git 会将您的提交的顺序进行记录，通过 <code>git log</code> 命令可以查看您的提交历史。（更多关于 <code>git log</code> 的用法请参阅 <a href="https://git-scm.com/book/zh/v2/Git-基础-查看提交历史" target="_blank" rel="noopener">https://git-scm.com/book/zh/v2/Git-基础-查看提交历史</a>）。而您的每次提交均被 Git 以 SHA-1 码记录，这样一来，您便可以依据其将工作目录恢复到某个过去的时间节点。假如，您已经回到工作目录过去的某个时间节点，而您又想回到未来（相对于当前时间节点），那么，您可以借助 <code>git reflog</code> 来查找“未来”的时间节点，然后使用 <code>git checkout ID</code> 进行穿梭（ID 指的是 SHA-1 码）。工作目录的时间节点的状态是由 HEAD 进行指示的，故而，您也可以使用 <code>git reset --hard commit_id</code> 不断的切换 HEAD 达到穿梭时间的效果。</p><p>有时候您提交完了才发现漏掉了几个文件没有添加，或者提交信息写错了。 此时，可以运行 <code>git commit -a -m</code> 提交命令尝试重新提交（其中 <code>-a</code> 表示 <code>--amend</code>）。</p><h3 id="1-3-远程仓库"><a href="#1-3-远程仓库" class="headerlink" title="1.3 远程仓库"></a>1.3 远程仓库</h3><p>上一节您已经了解了然后创建一个本地仓库，并对该本地仓库进行管理。本节我们探讨<strong>远程仓库</strong>（远程仓库是指托管在服务器或其他网络中的你的项目的版本库）。因为该仓库仅仅作为合作媒介，不需要从磁盘检查快照，所以一个远程仓库通常只是一个<strong>裸仓库</strong>（bare repository，一个没有当前工作目录的仓库，即工程目录内的 <code>.git</code> 目录）。</p><p>创建一个裸仓库，只需要：</p><pre class="line-numbers language-sh"><code class="language-sh">$ git clone --bare my_project my_project.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该命令实现了将 <code>my_project/.git</code> 复制到 <code>my_project.git</code> 目录中的作用，而 <code>my_project.git</code> 便是一个裸仓库。为了让裸仓库发挥分布式的作用，需要将其放到服务器上并设置你的协议。其他拥有服务器的访问或读写权限的电脑将可以通过如下方式进行复刻：</p><pre class="line-numbers language-sh"><code class="language-sh">$ git clone user@git.example.com:/opt/git/my_project.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中， <code>user@git.example.com</code> 代表服务器的地址，而 <code>/opt/git/my_project.git</code> 代表服务器上裸仓库所在路径。本文不展开说明如何构建服务器，如果您想要了解构建服务器的详细信息，可以查看：<a href="https://git-scm.com/book/zh/v2/服务器上的-Git-在服务器上搭建-Git" target="_blank" rel="noopener">服务器上的 Git - 在服务器上搭建 Git</a>（<a href="https://git-scm.com/book/zh/v2/服务器上的-Git-在服务器上搭建-Git" target="_blank" rel="noopener">https://git-scm.com/book/zh/v2/服务器上的-Git-在服务器上搭建-Git</a>） 或者 GitBlit（<a href="http://gitblit.com/" target="_blank" rel="noopener">http://gitblit.com/</a>）。本文将使用目前最大的 Git 托管平台——GitHub 这一 Git 服务器（详细内容见 <a href="https://git-scm.com/book/zh/v2/GitHub-账户的创建和配置" target="_blank" rel="noopener">https://git-scm.com/book/zh/v2/GitHub-账户的创建和配置</a>）。</p><p>假如从 GitHub 上搜寻到一个不错的仓库，您想要将其加入到自己的项目中去，您可以这样做：</p><p><img src="/zh-CN/ad2d8036/fork.png" alt="fork"></p><p>点击右边的 <code>fork</code> 按钮，然后，选择您的用户名或者组织，将其复刻下来。这样，您便有了对该仓库的读写以及<strong>推送</strong>（将本地仓库同步到远端仓库）的权限。使用 <code>git clone</code> 的命令将远端仓库克隆到本地，克隆的网址可以这样获取：</p><p><img src="/zh-CN/ad2d8036/clone.png" alt="git clone"></p><p>当您克隆到本地后，可以使用 <code>git remote -v</code> 命令查看远程仓库使用的 Git 保存的简写与其对应的 URL，比如：</p><pre class="line-numbers language-sh"><code class="language-sh">origin  https://github.com/xinetzone/xinet-matery.git (fetch)origin  https://github.com/xinetzone/xinet-matery.git (push)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中 <code>origin</code> 便是别名。如果您想要拥有多个远程仓库，可以运行 <code>git remote add &lt;shortname&gt; &lt;url&gt;</code> 添加一个新的远程 Git 仓库，同时指定一个你可以轻松引用的简写。</p><p>为了方便说明我们创建两个本地仓库 <code>server/D.git</code> 与 <code>server/R.git</code>，然后在目录 <code>T</code> 中添加这两个仓库：</p><p><img src="/zh-CN/ad2d8036/remote.png" alt="git remote add"></p><p>从上图可以看出，目录 <code>T</code> 下有两个远程仓库，它们的别名分别为：<code>D</code> 与 <code>R</code>。现在您可以在命令行中使用字符串 <code>D</code> 来代替整个 URL。 例如，如果你想拉取 <code>D</code> 所指代的仓库,可以运行 <code>git fetch D</code>，这个命令会访问远程仓库，从中拉取所有你还没有的数据。执行完成后，你将会拥有那个远程仓库中所有分支的引用，接着，您运行 <code>git merge D/master</code> 命令便可以将 <code>D</code> 合并到当前目录。</p><p>如果你使用 <code>git clone</code> 命令克隆了一个仓库，该命令会自动将其添加为远程仓库并默认以 “origin” 为简写。</p><p>如果您在当前工作目录下做了修改，并且，想要将其分享，只需要执行 <code>git push [remote-name] [branch-name]</code> 命令即可。比如：</p><pre class="line-numbers language-sh"><code class="language-sh">$ git push D master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果您想查看远程仓库的更多详细信息，可以运行 <code>git remote show [remote-name]</code>；如果您想要重命名引用的名称可以运行 <code>git remote rename</code>；如果您想要删除远程仓库可以运行 <code>git remote rm</code> 或者 <code>git push origin --delete branch_name</code>。</p><h3 id="1-4-标签"><a href="#1-4-标签" class="headerlink" title="1.4 标签"></a>1.4 标签</h3><p>在切换不同的时间节点时，可以借助 commit 的 ID，但是，此 ID 有点反人类，太长了并且不好记忆。为了人们可以更好的管理历史节点，我们需要给那些重要的历史节点打上标签，这样一来，人们通过这些有实际语义的标签进行管理将更加方便。</p><p>Git 主要使用两种类型的标签：轻量标签（lightweight）与附注标签（annotated）。</p><h4 id="1-4-1-附注标签"><a href="#1-4-1-附注标签" class="headerlink" title="1.4.1 附注标签"></a>1.4.1 附注标签</h4><p>附注标签的创建可以这样：</p><pre class="line-numbers language-sh"><code class="language-sh">$ git tag -a v1.4 -m "我的版本 1.4"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>您可以使用 <code>git tag</code> 或者 <code>git tag -l 'v1.4.1*'</code> 列出当前的标签。或者使用 <code>git show v1.4</code> 命令查看标签信息与其对应的提交信息。</p><h4 id="1-4-2-轻量标签"><a href="#1-4-2-轻量标签" class="headerlink" title="1.4.2 轻量标签"></a>1.4.2 轻量标签</h4><p>轻量标签不需要提供 commit 信息，只需要：</p><pre class="line-numbers language-sh"><code class="language-sh">$ git tag v1.4-1q<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>您亦可以对历史提交的某个 commit ID 进行打标，比如：</p><pre class="line-numbers language-sh"><code class="language-sh">$ git tag -a v1.1 ead28ed<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-4-3-管理标签"><a href="#1-4-3-管理标签" class="headerlink" title="1.4.3 管理标签"></a>1.4.3 管理标签</h4><p>您可以使用命令 <code>git push origin [tagname]</code> 将标签推送到远端；如果想要一次推送多个标签，可以是使用 <code>git push origin --tags</code>。</p><p>当然，您也可以使用命令 <code>git tag -d &lt;tagname&gt;</code> 删除标签。如果也要将远端的标签删除，可以使用命令 <code>git push &lt;remote&gt; :refs/tags/&lt;tagname&gt;</code>，比如：</p><pre class="line-numbers language-sh"><code class="language-sh">$ git push origin :refs/tags/v1.4-1q<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-5-分支"><a href="#1-5-分支" class="headerlink" title="1.5 分支"></a>1.5 分支</h3><p><strong>分支</strong> 可以想象为不同维度的平行宇宙，在同一个时间节点可以并行的存在不同的支线来发展项目的不同功能。专业点的说法：Git 的分支仅仅是指向提交对象的可变指针，（Git 的默认分支名称为 master）每次进行 <code>git commit</code> 操作，都将会移动该指针。分支就好比河流拥有的支流，只不过在这些支流上面存在着无法移动的“指针”（git tag）与可以移动的“指针”（git branch）。</p><p>分支的创建需要使用 <code>git branch</code>，比如：</p><pre class="line-numbers language-sh"><code class="language-sh">$ git branch develop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以移动？那么我们该如何判断工作目录所处的状态呢？（简单点说，我们该如何判断我们 “now” 的位置。）这个很简单，Git 中还有一个特殊的指针 <code>HEAD</code>，它总是指向当前所在的分支所在的时间节点。您可以使用 <code>git log --oneline --decorate</code> 命令查看各个分支的指针。</p><p>您若要在不同的分支之间进行跳转，可以使用 <code>git checkout [分支名]</code> 进行切换。有没有命令将创建分支与切换分支进行合并的呢？当然有了，它就是：<code>git branch -b &lt;分支名&gt;</code>。</p><p>关于分支的命令还有：</p><ul><li>合并：<code>git merge branch_name</code></li><li>删除：<code>git branch -d branch_name</code></li></ul><h3 id="1-6-vscode-与-Git-集成"><a href="#1-6-vscode-与-Git-集成" class="headerlink" title="1.6 vscode 与 Git 集成"></a>1.6 vscode 与 Git 集成</h3><p>为了让 Git 更好的与 vscode 集成，提供更丰富的 commit 信息，您可以这样：</p><pre class="line-numbers language-sh"><code class="language-sh">$ git config --global core.editor "code --wait"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将 vscode 作为 Git 的内核编辑器。</p><h2 id="2-使用-Git-管理项目"><a href="#2-使用-Git-管理项目" class="headerlink" title="2 使用 Git 管理项目"></a>2 使用 Git 管理项目</h2><p>前面介绍了 Git 的基础知识，本文剩余部分将介绍如何利用 Git 更好的管理您的项目。</p><h3 id="2-1-对-Microsoft-Office-进行版本控制"><a href="#2-1-对-Microsoft-Office-进行版本控制" class="headerlink" title="2.1 对 Microsoft Office 进行版本控制"></a>2.1 对 Microsoft Office 进行版本控制</h3><p>最新版的 Git，已经支持对 <code>.docx</code> 的控制。下面我们简单做个小测验：</p><ol><li>创建文件 <code>A.docx</code>，并写入内容：<code>这是一个测试！</code>，之后纳入 Git 管理：</li></ol><p><img src="/zh-CN/ad2d8036/A.png" alt="一个测试"></p><p>接着我们修改 <code>A.docx</code> 中的内容为 <code>这是一个被修改的测试哦！</code>：</p><p><img src="/zh-CN/ad2d8036/mod_docx.png" alt="一个被修改的 word"></p><p>从上图可以看出修改的内容与之前的（对 <code>.docx</code> 进行）比较。如果您还不满足，想要使用 Git 比较 <code>.xlsx</code> 文件的话，您可以参考：<a href="http://programmaticallyspeaking.com/git-diffing-excel-files.html" target="_blank" rel="noopener">http://programmaticallyspeaking.com/git-diffing-excel-files.html</a>。</p><p>对于使用命令行，大多数人都是有点抵触的，好在有需求就有市场，在 Windows 系统下使用 Git，我们可以借助一个十分强大的 GUI 软件：TortoiseGit。</p><p>首先，我们需要下载并安装 TortoiseGit。下载网址：<a href="https://tortoisegit.org/download/" target="_blank" rel="noopener">https://tortoisegit.org/download/</a>，我们选择 64 位进行下载，并且需要下载中文语言包：</p><p><img src="/zh-CN/ad2d8036/install_tortoisegit.png" alt="TortoiseGit 下载"></p><p>下载好之后，按照提示默认安装即可，但是，安装中文包的最后一步需要按下图选择打勾：</p><p><img src="/zh-CN/ad2d8036/S.png" alt="安装 TortoiseGit 中文包"></p><p>关于 TortoiseGit 的使用细节可参考其手册：<a href="https://tortoisegit.org/docs/" target="_blank" rel="noopener">https://tortoisegit.org/docs/</a>。其实，TortoiseGit 被集成在了右键快捷键中：</p><p><img src="/zh-CN/ad2d8036/TortoiseGit.png" alt="TortoiseGit 集成于右键"></p><p>从上图可以清晰的看到 Git 的大部分功能都被集成到了右键快捷键中。使用 TortoiseGit 比较差异将比较简单：</p><p><img src="/zh-CN/ad2d8036/SS.png" alt="TortoiseGit 比较 docx"></p><p>接着，将打开 Word，界面如下：</p><p><img src="/zh-CN/ad2d8036/SSS.png" alt="TortoiseGit 比较 docx 界面"></p><p>这样的界面将会更加直观！</p><p>TortoiseGit 的强大不仅仅如此，它还可以直接比较 <code>.xlsx</code>、<code>.pptx</code> 等。换句话说，TortoiseGit 与 Microsoft office 完美的结合在了一起，为您的 office 管理提供了一个十分高大上的 Git 支持。</p><h3 id="2-2-TortoiseGit-的使用"><a href="#2-2-TortoiseGit-的使用" class="headerlink" title="2.2 TortoiseGit 的使用"></a>2.2 TortoiseGit 的使用</h3><p>下面我们演示如何使用 TortoiseGit 操作项目？首先，从服务端（如局域网架设的 Git 服务器，GitHub 等）获取远程项目的地址：<code>ssh://lxw@192.168.42.30:29418/test.git</code>（此地址是我通过 GitBlit 架设的服务器创建的一个空的裸库）。其中， <code>lxw</code> 表示远程裸库的用户名：</p><p><img src="/zh-CN/ad2d8036/Tortoiseclone.png" alt="TortoiseGit clone"></p><p>需要输入 <code>lxw</code> 对应的密码：</p><p><img src="/zh-CN/ad2d8036/mima.png" alt="TortoiseGit clone 密码"></p><p>因为是刚刚克隆（<code>git clone</code>）的仓库，其中的暂存区与工作目录均是干净的，所以，目录图标上会有蓝色的对勾：</p><p><img src="/zh-CN/ad2d8036/test.png" alt="test"></p><p>下面使用 vscode 打开工作目录 <code>test</code> 并创建一个 git bash 终端。该项目已经存在自述文档（<code>README.md</code>）与 <code>.gitignore</code>（令 Git 忽视的文件列表）。为了更好的展示 TortoiseGit 与的集成效果，下面我们将演示如何利用 TortoiseGit 管理 <code>.docx</code> 文档。</p><p>我们先创建 <code>A.docx</code> 并写入内容：我是 A。由于 <code>A.docx</code> 没有加入到 Git 管理，所以其图标为空：</p><p><img src="/zh-CN/ad2d8036/AA.png" alt="A"></p><p>接着，将 <code>A.docx</code> 纳入 Git 管理：</p><p><img src="/zh-CN/ad2d8036/git_add.png" alt="右键添加"></p><p>接着弹出一个窗口，列出所有未被加入到 Git 管理的文件（即 <code>git add</code> 操作）：</p><p><img src="/zh-CN/ad2d8036/add1.png" alt="列出未被 Git 追踪的文档"><br><img src="/zh-CN/ad2d8036/add2.png" alt="追踪文档"></p><p>自此，完成了将 <code>A.docx</code> 纳入 Git 的 <code>index</code> （即暂存区）的操作，刷新目录，可以看到 <code>A.docx</code> 多了一个蓝色的 $+$ 图标：</p><p><img src="/zh-CN/ad2d8036/plus.png" alt="完成 git add"></p><p>至此，如果您没有其他需要加入到暂存区的文档，您可以将这些暂存区的信息提交（<code>git commit</code>）到本地仓库，并写上简要的说明：</p><p><img src="/zh-CN/ad2d8036/master.png" alt="提交到本地 master"></p><p><img src="/zh-CN/ad2d8036/commit.png" alt="写上简要的说明"></p><p>如果您还想要与其他人共享编写 <code>A.docx</code>，您需要将其推送（<code>git push</code>）到远端服务器：</p><p><img src="/zh-CN/ad2d8036/push.png" alt="git push"></p><p>其他人只需要在他们克隆的副本进行拉取（<code>git pull</code>）便可获得您的更新：</p><p><img src="/zh-CN/ad2d8036/pull.png" alt="git pull"></p><p>如果某人 K 拉取之后对 <code>A.docx</code> 进行了修改，添加内容：</p><pre class="line-numbers language-doc"><code class="language-doc">做了 test1。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>而您自己也做了修改，添加内容：</p><pre class="line-numbers language-doc"><code class="language-doc">学习了 M。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之后，您先将变动推送到了远端。紧接着 K 也将其做的改动推送到远端，由于您们所做的改动有冲突，所以推送失败：</p><p><img src="/zh-CN/ad2d8036/push_error.png" alt="存在冲突"></p><p>解决冲突的办法有两种：</p><ol><li>创建新的分支（<code>git branch</code>）与发生冲突的分支分开，解决冲突交给管理员（负责管理整个项目的人）；</li><li>先将远端的更新获取（<code>git fetch</code>）下来（见下图），之后再解决冲突。</li></ol><p><img src="/zh-CN/ad2d8036/fetch.png" alt="git fetch"></p><p>更多的关于 TortoiseGit 的使用可以参考其官方文档 <a href="https://tortoisegit.org/docs/" target="_blank" rel="noopener">https://tortoisegit.org/docs/</a>，本文便不再引申。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github 编写 README 时如何获取 fork 等图标</title>
      <link href="/zh-CN/f7c6a6b8.html"/>
      <url>/zh-CN/f7c6a6b8.html</url>
      
        <content type="html"><![CDATA[<p>一般比较正式的开源项目会在 <code>README.md</code> 的开头添加类似如下图标：</p><p align="center"> <a href="https://xinetzone.github.io" target="_blank" rel="noopener noreferrer"><img width="100" src="https://xinetzone.github.io/favicon.png" alt="Blog logo"></a></p><p align="center"><a href="https://www.gnu.org/licenses/" target="_blank" rel="noopener"><img src="https://img.shields.io/github/license/xinetzone/xinetzone.github.io.svg" alt="License"></a><a href="http://hits.dwyl.io/xinetzone/xinetzonegithubio" target="_blank" rel="noopener"><img src="http://hits.dwyl.io/xinetzone/xinetzonegithubio.svg" alt="HitCount"></a><a href="https://github.com/xinetzone/xinetzone.github.io/network" target="_blank" rel="noopener"><img src="https://img.shields.io/github/forks/xinetzone/xinetzone.github.io.svg" alt="GitHub forks"></a> <a href="https://github.com/xinetzone/xinetzone.github.io/stargazers" target="_blank" rel="noopener"><img src="https://img.shields.io/github/stars/xinetzone/xinetzone.github.io.svg" alt="GitHub stars"></a></p><p>那么该如何生成上面的图标效果呢？首先，我们可以借由 <a href="http://hits.dwyl.io/" target="_blank" rel="noopener">http://hits.dwyl.io/</a> 网站来获取 <code>hits</code> 数：</p><img src="/zh-CN/f7c6a6b8/f7c6a6b8/hits.png" title="hits"><p>只需要修改</p><pre><code>[![HitCount](http://hits.dwyl.io/xinetzone/xinetzonegithubio.svg)](http://hits.dwyl.io/xinetzone/xinetzonegithubio)</code></pre><p>为</p><pre><code>&lt;a href="http://hits.dwyl.io/xinetzone/xinetzonegithubio"&gt;&lt;img src="http://hits.dwyl.io/xinetzone/xinetzonegithubio.svg" alt="HitCount"&gt;&lt;/a&gt;</code></pre><p><code>licenses</code> 可以这样写：</p><pre><code>&lt;a href="https://www.gnu.org/licenses/"&gt;&lt;img src="https://img.shields.io/github/license/xinetzone/xinetzone.github.io.svg" alt="License"&gt;&lt;/a&gt;</code></pre><p>同样 fork 与 star 可以这样写：</p><pre><code>&lt;a href="https://github.com/xinetzone/xinetzone.github.io/network"&gt;&lt;img src="https://img.shields.io/github/forks/xinetzone/xinetzone.github.io.svg" alt="GitHub forks"&gt;&lt;/a&gt; &lt;a href="https://github.com/xinetzone/xinetzone.github.io/stargazers"&gt;&lt;img src="https://img.shields.io/github/stars/xinetzone/xinetzone.github.io.svg" alt="GitHub stars"&gt;&lt;/a&gt;</code></pre><p>通过这里例子，大家应该看出规律了：针对 <code>fork</code>、<code>star</code> 只需要将 <code>xinetzone</code> 替换为个人 github 账户即可。而 <code>licenses</code> 只需要修改 <code>href</code> 为对应的 <code>licenses</code> 类型即可。</p><p>那最开头的图片如何得到？代码很简单：</p><pre><code>&lt;p align="center"&gt;&lt;a href="https://xinetzone.github.io" target="_blank" rel="noopener noreferrer"&gt;&lt;img width="100" src="https://xinetzone.github.io/favicon.png" alt="Blog logo"&gt;&lt;/a&gt;&lt;/p&gt;</code></pre><p><code>href</code> 替换为 GitHub Pages 创建的博客 host。</p><p>最终，完整的代码为：</p><pre><code>&lt;p align="center"&gt;&lt;a href="https://xinetzone.github.io" target="_blank" rel="noopener noreferrer"&gt;&lt;img width="100" src="https://xinetzone.github.io/favicon.png" alt="Blog logo"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p align="center"&gt;&lt;a href="https://www.gnu.org/licenses/"&gt;&lt;img src="https://img.shields.io/github/license/xinetzone/xinetzone.github.io.svg" alt="License"&gt;&lt;/a&gt;&lt;a href="http://hits.dwyl.io/xinetzone/xinetzonegithubio"&gt;&lt;img src="http://hits.dwyl.io/xinetzone/xinetzonegithubio.svg" alt="HitCount"&gt;&lt;/a&gt;&lt;a href="https://github.com/xinetzone/xinetzone.github.io/network"&gt;&lt;img src="https://img.shields.io/github/forks/xinetzone/xinetzone.github.io.svg" alt="GitHub forks"&gt;&lt;/a&gt; &lt;a href="https://github.com/xinetzone/xinetzone.github.io/stargazers"&gt;&lt;img src="https://img.shields.io/github/stars/xinetzone/xinetzone.github.io.svg" alt="GitHub stars"&gt;&lt;/a&gt;&lt;/p&gt;</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 开源项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> README </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何修改 hexo-theme-matery 模板</title>
      <link href="/zh-CN/3567ebbb.html"/>
      <url>/zh-CN/3567ebbb.html</url>
      
        <content type="html"><![CDATA[<h2 id="修改-docs-目录下的-config-yml"><a href="#修改-docs-目录下的-config-yml" class="headerlink" title="修改 /docs/ 目录下的 _config.yml"></a>修改 <code>/docs/</code> 目录下的 <code>_config.yml</code></h2><p>下面介绍如何修改模板主题：<a href="https://github.com/blinkfox/hexo-theme-matery.git" target="_blank" rel="noopener">https://github.com/blinkfox/hexo-theme-matery.git</a>。</p><p>首先，在个人 github 创建一个 repo，比如：<a href="https://github.com/xinetzone" target="_blank" rel="noopener">xinetzone</a>/<strong><a href="https://github.com/xinetzone/xinetzone.github.io" target="_blank" rel="noopener">xinetzone.github.io</a></strong>，接着克隆到本地。其中 <code>xinetzone</code> 是个人用户名称。为了将设置好的主题上传到 GitHub，需要创建一个分支 <code>hexo</code>：</p><pre class="line-numbers language-sh"><code class="language-sh">$ cd xinetzone.github.io$ git checkout -b hexo$ mkdir docs$ cd docs$ hexo init --no-install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中 <code>--no-install</code> 表示使用 hexo 进行初始化并跳过 <code>npm install</code>。下面需要切换主题，通过 <code>git submodule</code> 添加 hexo-theme-matery 主题：</p><pre class="line-numbers language-sh"><code class="language-sh">$ git submodule add https://github.com/blinkfox/hexo-theme-matery.git themes/hexo-theme-matery<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果报报”error: RPC failed; curl 56 OpenSSL SSL_read: SSL_ERROR_SYSCALL, errno 10054”解决方法：</p><pre class="line-numbers language-sh"><code class="language-sh">$ git config http.sslVerify "false"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果再报 “git config http.sslVerify “false”  fatal: not in a git directory”，请执行： </p><pre class="line-numbers language-sh"><code class="language-sh">$ git config  --globle   http.sslVerify "false"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改 <code>/docs/</code> 目录下的 <code>_config.yml</code>，下面依照 <a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md" target="_blank" rel="noopener">hexo-theme-matery/README_CN.md</a> 给出我自己的修改：</p><pre class="line-numbers language-yml"><code class="language-yml"># Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Sitetitle: 刘新伟的博客subtitle: "知者乐水，仁者乐山"description: 温州大学 | 应用数学 | 深度学习keywords: "MXNet Pytorch TensorFlow 刘新伟 计算机视觉 深度学习"author: 刘新伟language: # 多语言支持- zh-tw- entimezone:# URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: https://xinetzone.github.io/ # https://xxx.github.io/ 类似于 host 服务器root: /permalink: :year/:month/:day/:title/permalink_defaults:# Directorysource_dir: sourcepublic_dir: publictag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads/codei18n_dir: :langskip_render:# Writingnew_post_name: :title.md # File name of new postsdefault_layout: posttitlecase: false # Transform title into titlecase（首字母大写）external_link: true # Open external links in new tabfilename_case: 0render_drafts: falsepost_asset_folder: true # 为 true参数后，在建立文件时，Hexo                          ## 会自动建立一个与文章同名的文件夹，您可以把与该文章相关的所有资源都放到那个文件夹，如此一来，您便可以更方便的使用资源。relative_link: falsefuture: truehighlight: # 默认的不好看，需要禁用  enable: false  line_number: false  auto_detect: false  tab_replace:# Home page setting# path: Root path for your blogs index page. (default = '')# per_page: Posts displayed per page. (0 = disable pagination)# order_by: Posts order. (Order by date descending by default)index_generator:  path: ''  per_page: 18  order_by: -date# Category & Tagdefault_category: uncategorizedcategory_map:tag_map:# Date / Time format## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DDtime_format: HH:mm:ss# Pagination## Set per_page to 0 to disable paginationper_page: 18pagination_dir: page# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: hexo-theme-matery# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: # 部署  type: git  repo: https://github.com/xinetzone/xinetzone.github.io.git  branch: master# 自定义## 添加emoji表情支持githubEmojis:  enable: true  className: github-emoji  inject: true  styles:  customEmojis:## 代码高亮prism_plugin:  mode: 'preprocess'    # realtime/preprocess  theme: 'tomorrow'  line_number: true    # default false  custom_css:## 内容搜索search:  path: search.xml  field: post## 添加 RSS 订阅支持feed:  type: atom  path: atom.xml  limit: 20  hub:  content:  content_limit: 140  content_limit_delim: ' '  order_by: -date## 添加动漫人物 live2d:  # https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md  enable: true # 默认 false  scriptFrom: local # 默认  pluginRootPath: live2dw/ # 插件在站点上的根目录(相对路径)  pluginJsPath: lib/ # 脚本文件相对与插件根目录路径  pluginModelPath: assets/ # 模型文件相对与插件根目录路径  # scriptFrom: jsdelivr # jsdelivr CDN  # scriptFrom: unpkg # unpkg CDN  # scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # 你的自定义 url  tagMode: false # 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中  debug: false # 调试, 是否在控制台输出日志  # log: false  model: # https://github.com/xiazeyu/live2d-widget-models    use: live2d-widget-model-shizuku # npm-module package name，    # use: wanko # 博客根目录/live2d_models/ 下的目录名    # use: ./wives/wanko # 相对于博客根目录的路径    # use: https://cdn.jsdelivr.net/npm/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # 你的自定义 url  display:    position: left    width: 150    height: 300  mobile: # 是否在移动设备上显示    show: true # 默认 false    scale: 0.5 # 移动设备上的缩放    react:    opacity: 0.7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着，使用 <code>npm install</code> 安装必备包：</p><pre class="line-numbers language-sh"><code class="language-sh">$ npm install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>关于 <code>fsevents</code> 的警告不要管，在 Windows 系统中总会有。但需要升级 <code>core-js@3</code>（即 Hexo 3）：</p><pre class="line-numbers language-sh"><code class="language-sh">$ npm install core-js@3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>更多的配置请 :book: <a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md" target="_blank" rel="noopener">hexo-theme-matery/README_CN.md</a>。为了可以将 hexo 主题部署到 github，需要：</p><pre class="line-numbers language-sh"><code class="language-sh">$ npm i hexo-deployer-git$ hexo clean && hexo g$ hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="修改网站的内容与插件"><a href="#修改网站的内容与插件" class="headerlink" title="修改网站的内容与插件"></a>修改网站的内容与插件</h2><p>以下内容参考：<a href="https://godweiyang.com/2018/04/13/hexo-blog/" target="_blank" rel="noopener">https://godweiyang.com/2018/04/13/hexo-blog/</a></p><h3 id="添加-404-页面"><a href="#添加-404-页面" class="headerlink" title="添加 404 页面"></a>添加 404 页面</h3><p>首先在 <code>/docs/source/</code> 目录下新建一个 <code>404.md</code>，内容如下：</p><pre><code>---title: 404date: 2019-09-02 13:13:10type: "404"layout: "404"description: "你来到了没有知识的荒原 :("---</code></pre><p>然后在 <code>/docs/themes/matery/layout/</code> 目录下新建一个 <code>404.ejs</code> 文件，内容如下：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>style type<span class="token operator">=</span><span class="token string">"text/css"</span><span class="token operator">></span>    <span class="token comment" spellcheck="true">/* don't remove. */</span>    <span class="token punctuation">.</span>about<span class="token operator">-</span>cover <span class="token punctuation">{</span>        height<span class="token punctuation">:</span> 75vh<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"bg-cover pd-header about-cover"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"container"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"row"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"col s10 offset-s1 m8 offset-m2 l8 offset-l2"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"brand"</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"title center-align"</span><span class="token operator">></span>                        <span class="token number">404</span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"description center-align"</span><span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">=</span> page<span class="token punctuation">.</span>description <span class="token operator">%</span><span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token comment" spellcheck="true">// 每天切换 banner 图.  Switch banner image every day.</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.bg-cover'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-image'</span><span class="token punctuation">,</span> <span class="token string">'url(/medias/banner/'</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.jpg)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="“关于”页面增加简历（可选）"><a href="#“关于”页面增加简历（可选）" class="headerlink" title="“关于”页面增加简历（可选）"></a>“关于”页面增加简历（可选）</h3><p>修改 <code>/docs/themes/matery/layout/about.ejs</code>，找到 <code>&lt;div class="card"&gt;</code> 标签，然后找到它对应的 <code>&lt;/div&gt;</code> 标签，接在后面新增一个 card，语句如下：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"card"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"card-content"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"card-content article-card-content"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"title center-align"</span> data<span class="token operator">-</span>aos<span class="token operator">=</span><span class="token string">"zoom-in-up"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-address-book"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string">'myCV'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"articleContent"</span> data<span class="token operator">-</span>aos<span class="token operator">=</span><span class="token string">"fade-up"</span><span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> page<span class="token punctuation">.</span>content <span class="token operator">%</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就会多出一张 card，然后可以在 <code>/docs/source/about/index.md</code> 下面写上你的简历了，当然这里的位置随你自己设置，你也可以把简历作为第一个 card。</p><h3 id="添加动漫人物"><a href="#添加动漫人物" class="headerlink" title="添加动漫人物"></a>添加动漫人物</h3><pre class="line-numbers language-sh"><code class="language-sh">$ npm install --save hexo-helper-live2d$ npm install live2d-widget-model-shizuku<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在 <code>/docs/_config.yml</code> 最后添加：</p><pre class="line-numbers language-yml"><code class="language-yml">live2d:  enable: true # 默认为 false  scriptFrom: local  pluginRootPath: live2dw/  pluginJsPath: lib/  pluginModelPath: assets/  tagMode: false  log: false  model:    use: live2d-widget-model-shizuku  display:    position: left    width: 200    height: 400  mobile:    show: true # 默认 false  react:    opacity: 0.7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="图片添加水印"><a href="#图片添加水印" class="headerlink" title="图片添加水印"></a>图片添加水印</h3><p>为了防止别人抄袭你文章，可以把所有的图片都加上水印，方法很简单。</p><p>首先新建一个 <code>/docs/watermark.py</code>，代码如下：</p><pre class="line-numbers language-py"><code class="language-py"># -*- coding: utf-8 -*-import sysimport globfrom PIL import Imagefrom PIL import ImageDrawfrom PIL import ImageFontdef watermark(post_name):    if post_name == 'all':        post_name = '*'    dir_name = 'source/_posts/' + post_name + '/*'    for files in glob.glob(dir_name):        im = Image.open(files)        if len(im.getbands()) < 3:            im = im.convert('RGB')            print(files)        font = ImageFont.truetype('STSONG.TTF', max(30, int(im.size[1] / 20)))        draw = ImageDraw.Draw(im)        draw.text((im.size[0] / 2, im.size[1] / 2),                  u'@godweiyang', fill=(0, 0, 0), font=font)        im.save(files)if __name__ == '__main__':    if len(sys.argv) == 2:        watermark(sys.argv[1])    else:        print('[usage] <input>')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>字体也放根目录下，自己找字体。然后每次写完一篇文章可以运行 <code>python3 watermark.py  postname</code> 添加水印，如果第一次运行要给所有文章添加水印，可以运行 <code>python3 watermark.py all</code>。</p><pre class="line-numbers language-sh"><code class="language-sh">$ npm install hexo --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="修复代码块行号不显示的-bug"><a href="#修复代码块行号不显示的-bug" class="headerlink" title="修复代码块行号不显示的 bug"></a>修复代码块行号不显示的 bug</h3><p>修改 <code>/docs/themes/matery/source/css/matery.css</code> 第 95 行左右的 <code>pre</code> 和 <code>code</code> 两段改为如下代码：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">pre </span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* padding: 3.3rem !important; */</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">1.5</span>rem <span class="token number">1.5</span>rem <span class="token number">1.5</span>rem <span class="token number">3.3</span>rem <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">1</span>rem <span class="token number">0</span> <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#272822</span><span class="token punctuation">;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">0.35</span>rem<span class="token punctuation">;</span>    <span class="token property">tab-size</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">code </span><span class="token punctuation">{</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">1</span>px <span class="token number">5</span>px<span class="token punctuation">;</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> Inconsolata, Monaco, Consolas, <span class="token string">'Courier New'</span>, Courier, monospace<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* font-size: 0.91rem; */</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#e96900</span><span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#f8f8f8</span><span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">2</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>即 注释掉 <code>code</code> 的 <code>font-size: 0.91rem</code>，修改 <code>pre</code> 的 <code>padding</code>。然后在 <code>/docs/_config.yml</code> 中设置 <code>prism_plugin.line_number</code> 为 <code>true</code>。</p><h2 id="上传主题到-GitHub"><a href="#上传主题到-GitHub" class="headerlink" title="上传主题到 GitHub"></a>上传主题到 GitHub</h2><p>上面的一系列操作已经配置了一个可以使用的网站了，为了更加便利的使用主题，我们需要将其备份到 GitHub：</p><pre class="line-numbers language-sh"><code class="language-sh">$ cd .. # 切换回主项目的根目录$ git add .$ git commit -m "创建一个hexo demo"$ git push origin hexo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>最后还需要将 origin/hexo 设置为 Github 默认仓库。</p><p>最终的效果展示可以 :book: <a href="https://xinetzone.github.io">https://xinetzone.github.io</a>。</p><h2 id="部署到-GitHub-时图片显示问题"><a href="#部署到-GitHub-时图片显示问题" class="headerlink" title="部署到 GitHub 时图片显示问题"></a>部署到 GitHub 时图片显示问题</h2><p>一般情况，hexo3 对于图片的显示可能会出现问题，解决方法是卸载 <code>hexo-render-marked-lazy</code>。如果还有问题，那么可能是链接出现问题，解决策略是将默认是链接方式改为永久性链接，:book: <a href="https://hexo.io/zh-cn/docs/permalinks.html" target="_blank" rel="noopener">永久链接（Permalinks）</a> 以及 <a href="https://post.zz173.com/detail/hexo-abbrlink-2.0.4.html" target="_blank" rel="noopener">abbrlink更新2.0.4说明</a>。<code>/docs/_config.yml</code> 要做两处修改：</p><pre class="line-numbers language-yml"><code class="language-yml">permalink: :lang/:abbrlink.html # :lang/:title/（多语言） 或者 :year/:month/:day/:title/abbrlink:  alg: crc32  # 算法：crc16(default) and crc32  rep: hex    # 进制：dec(default) and hexpermalink_defaults:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与</p><pre class="line-numbers language-yml"><code class="language-yml"># Writingnew_post_name: :lang/:title.md # File name of new posts，支持多语言<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="修改首页页脚显示"><a href="#修改首页页脚显示" class="headerlink" title="修改首页页脚显示"></a>修改首页页脚显示</h2><p>下面是我修改的部分代码：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>footer <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"page-footer bg-color"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"container row center-align"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"col s12 m8 l8 copy-right"</span><span class="token operator">></span>            本站由<span class="token operator">&amp;</span>copy<span class="token punctuation">;</span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"https://xinetzone.github.io/"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span><span class="token operator">></span>xinetzone<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>基于            <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"https://blinkfox.github.io/"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span><span class="token operator">></span>闪烁之狐<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span> 的            <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"https://github.com/blinkfox/hexo-theme-matery"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span><span class="token operator">></span>hexo<span class="token operator">-</span>theme<span class="token operator">-</span>matery<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>主题搭建<span class="token punctuation">.</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"col s12 m8 l8"</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>wordCount<span class="token punctuation">.</span>enable <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>wordCount<span class="token punctuation">.</span>totalCount<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-area-chart"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>站点总字数<span class="token punctuation">:</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>                <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"white-color"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">=</span> <span class="token function">totalcount</span><span class="token punctuation">(</span>site<span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>            <span class="token operator">&lt;</span>span id<span class="token operator">=</span><span class="token string">"sitetime"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">let</span> socialClass <span class="token operator">=</span> <span class="token string">''</span> <span class="token operator">%</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>busuanziStatistics <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>busuanziStatistics<span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">%</span> socialClass <span class="token operator">=</span> <span class="token string">'social-statis'</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>busuanziStatistics <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>busuanziStatistics<span class="token punctuation">.</span>totalTraffic<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                <span class="token operator">&lt;</span>span id<span class="token operator">=</span><span class="token string">"busuanzi_container_site_pv"</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-heart-o"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>                    本站总访问量 <span class="token operator">&lt;</span>span id<span class="token operator">=</span><span class="token string">"busuanzi_value_site_pv"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"white-color"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>busuanziStatistics <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>busuanziStatistics<span class="token punctuation">.</span>totalNumberOfvisitors<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                <span class="token operator">&lt;</span>span id<span class="token operator">=</span><span class="token string">"busuanzi_container_site_uv"</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-users"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>                    次<span class="token punctuation">,</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>访客数 <span class="token operator">&lt;</span>span id<span class="token operator">=</span><span class="token string">"busuanzi_value_site_uv"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"white-color"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span> 人<span class="token punctuation">.</span>                <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"col s12 m4 l4 social-link &lt;%- socialClass %>"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_partial/social-link'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>footer<span class="token operator">></span><span class="token operator">...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体的布局方式，可以参考：<a href="http://www.materializecss.cn/grid.html" target="_blank" rel="noopener">materializecss: 网格</a>。</p><h2 id="修改社交链接"><a href="#修改社交链接" class="headerlink" title="修改社交链接"></a>修改社交链接</h2><p>对于 Github 只需要修改其对应文件的 <code>/docs/../thems/layout/_partial/social-link.ejs</code> 为：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>socialLink<span class="token punctuation">.</span>github<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"https://github.com/&lt;%= theme.socialLink.github %>"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"tooltipped"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span> data<span class="token operator">-</span>tooltip<span class="token operator">=</span><span class="token string">"访问我的GitHub"</span> data<span class="token operator">-</span>position<span class="token operator">=</span><span class="token string">"top"</span> data<span class="token operator">-</span>delay<span class="token operator">=</span><span class="token string">"50"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-github"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以添加领英：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>socialLink<span class="token punctuation">.</span>Linkedin<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"https://www.linkedin.com/in/&lt;%= theme.socialLink.Linkedin %>"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"tooltipped"</span> data<span class="token operator">-</span>tooltip<span class="token operator">=</span><span class="token string">"领英联系我: &lt;%= theme.socialLink.Linkedin %>"</span> data<span class="token operator">-</span>position<span class="token operator">=</span><span class="token string">"top"</span> data<span class="token operator">-</span>delay<span class="token operator">=</span><span class="token string">"50"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-linkedin"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文章头设置"><a href="#文章头设置" class="headerlink" title="文章头设置"></a>文章头设置</h2><p>首先为了新建文章方便，建议将 <code>/docs/scaffolds/post.md</code> 修改为如下代码：</p><pre><code>---title: {{ title }}date: {{ date }}top: false # 推荐文章（文章是否置顶）cover: false # 表示该文章是否需要加入到首页轮播封面中password:toc: truemathjax: falsecomments: truesummary: # 文章摘要tags: # 文章标签，一篇文章可以多个标签categories: # 文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类------版权声明：除非注明，本博文章均为原创，转载请以链接形式标明本文地址。---</code></pre><p>这样新建文章后不用你自己补充了，修改信息就行。</p><h2 id="部署的项目主页添加-README"><a href="#部署的项目主页添加-README" class="headerlink" title="部署的项目主页添加 README"></a>部署的项目主页添加 <code>README</code></h2><p>在部署的项目到 Github 上建立自己的博客仓库的时候并没有生成 README 文件，为此，我们需要在 <code>/docs/source</code>下手动新建 <code>README.md</code>。然后再在这个新建文件中写 <code>README</code> 即可。再之后 <code>hexo g</code> 会把它复制到 <code>/docs/public</code> 文件夹，而不会被解析成 html 文件，发布在博客中。</p><h2 id="创建新的页面"><a href="#创建新的页面" class="headerlink" title="创建新的页面"></a>创建新的页面</h2><p>首先运行如下命令，生成 :book: 页面：</p><pre class="line-numbers language-sh"><code class="language-sh">$ hexo new page board<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>系统会自动给你在 <code>/docs/source</code> 文件夹下创建一个 <code>book</code> 文件夹，以及 <code>book</code> 文件夹中的 <code>index.md</code>，这样你访问的 <code>book</code> 对应的链接就是 <code>http://xxx.xxx/book</code>。</p><p>然后在主题配置文件的 <code>menu</code> 菜单栏添加一个 <code>Yourdiy : /yourdiy</code>，注意冒号后面要有空格，以及前面的空格要和 <code>menu</code> 中默认的保持整齐。然后在 <code>languages</code> 文件夹中，找到 <code>zh-CN.yml</code>，在 <code>index</code> 中添加 <code>yourdiy: '中文意思'</code> 就可以显示中文了。</p><p>比如在 <code>zh-CN.yml</code> 中添加：<code>book: 书籍</code>，在 <code>menu</code> 菜单栏中添加：</p><pre class="line-numbers language-yml"><code class="language-yml">书籍:    url: /book    icon: fa-book<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github pages </tag>
            
            <tag> hexo </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+vscode+github pages 搭建属于自己的博客</title>
      <link href="/zh-CN/41cccb40.html"/>
      <url>/zh-CN/41cccb40.html</url>
      
        <content type="html"><![CDATA[<p>参考：<a href="https://godweiyang.com/2018/04/13/hexo-blog/#toc-heading-1/" target="_blank" rel="noopener">超详细Hexo+Github博客搭建小白教程</a></p><p>Hexo 是高效的静态站点生成框架，它基于 <code>Node.js</code>。通过 Hexo，你可以直接使用 Markdown 语法来撰写博客。本文搭建的环境是 Windows10。</p><h2 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h2><p>首先下载稳定版 Node.js：<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a>。<br>安装选项全部默认，一路点击 <code>Next</code>。</p><p>在 Windows PowerShell 中输入：</p><pre class="line-numbers language-sh"><code class="language-sh">$ node -v$ npm -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果没有报错，便说明安装成功。</p><h2 id="安装-Git-与-vscode"><a href="#安装-Git-与-vscode" class="headerlink" title="安装 Git 与 vscode"></a>安装 Git 与 vscode</h2><p>为了把本地的网页文件上传到 github 上面去，我们需要用到分布式版本控制工具：Git<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">下载地址</a>。安装选项还是全部默认，只不过最后一步添加路径时选择 <code>Use Git from the Windows Command Prompt</code>，这样我们就可以直接在命令提示符里打开 git 了。安装完成后在命令提示符中输入 <code>git --version</code> 验证是否安装成功。</p><p><a href="https://code.visualstudio.com/" target="_blank" rel="noopener">vscode</a> 的安装便比较简单，直接按照提示安装即可。</p><h2 id="创建-GitHub-Pages"><a href="#创建-GitHub-Pages" class="headerlink" title="创建 GitHub Pages"></a>创建 GitHub Pages</h2><p>在你的 GitHub 主页打开如下界面：</p><img src="/zh-CN/41cccb40/41cccb40/1114626-aa71be3d8b914371.png" title="创建 repo"><p>然后如下图所示，输入自己的项目名字，后面一定要加 <code>.github.io</code> 后缀，<code>README</code>初始化也要勾上。名称一定要和你的github名字完全一样，比如你 <code>github</code> 名字叫<code>abc</code>，那么仓库名字一定要是 <code>abc.github.io</code>。</p><img src="/zh-CN/41cccb40/41cccb40/1114626-f796295247fb7aba.png"><p>然后项目就建成了，点击 <code>Settings</code>，向下拉到最后有个 <code>GitHub Pages</code>，点击 <code>Choose a theme</code> 选择一个主题。将 <code>GitHub Pages</code> 生成的网址复制到如下位置：</p><img src="/zh-CN/41cccb40/41cccb40/1114626-ae9a9d173799c870.png"><p>点击网址 <a href="https://xinetzone.github.io/">https://xinetzone.github.io/</a>，便会显示：</p><img src="/zh-CN/41cccb40/41cccb40/1114626-93636579128421e5.png"><p>此页面的内容是由 <a href="https://github.com/xinetzone" target="_blank" rel="noopener">xinetzone</a>/<strong><a href="https://github.com/xinetzone/xinetzone.github.io" target="_blank" rel="noopener">xinetzone.github.io</a></strong> 根目录的 <code>README.md</code> 提供的。</p><img src="/zh-CN/41cccb40/41cccb40/1114626-97cfccb76ec79543.png"><p>使用 vscode 打开本地的一个文件夹：</p><img src="/zh-CN/41cccb40/41cccb40/1114626-2126a847e377b804.png"><p>选择 Git Bash 作为默认：</p><img src="/zh-CN/41cccb40/41cccb40/1114626-f0f238bc6f947912.png"><img src="/zh-CN/41cccb40/41cccb40/1114626-a3e18c31da2eeb5a.png"><p>为了提高 npm 运行速度需要添加淘宝源：</p><pre class="line-numbers language-sh"><code class="language-sh"> $ npm config set registry https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行如下命令安装 hexo：</p><pre class="line-numbers language-sh"><code class="language-sh">$ npm i hexo-cli -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完后输入 <code>hexo -v</code> 验证是否安装成功。将你在 GitHub 上的 reop 克隆至本地，并切换到 hexo 分支（用于存放网站的源代码）：</p><pre class="line-numbers language-sh"><code class="language-sh">$ git clone https://github.com/xinetzone/xinetzone.github.io.git$ cd xinetzone.github.io/$ git checkout hexo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>创建一个目录用于存储博客文件，切换目录并初始化网站：</p><pre class="line-numbers language-sh"><code class="language-sh">$ mkdir docs$ cd docs/$ hexo init$ npm install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其中 <code>hexo init</code> 为网站初始化环境，<code>npm install</code> 安装必备的组件，我们可以看到 <code>blog</code> 目录下生成如下目录：</p><img src="/zh-CN/41cccb40/41cccb40/1114626-f1260417e24c3632.png"><ul><li><code>node_modules</code>: 依赖包</li><li><code>public</code>：存放生成的页面，运行 <code>hexo g</code> 便会生成，而 <code>hexo clean</code> 便会删除</li><li><code>scaffolds</code>：生成文章的一些模板</li><li><code>source</code>：用来存放你的文章</li><li><code>themes</code>：主题</li><li><code>_config.yml</code>: 博客的配置文件</li></ul><p>这样本地的网站配置也弄好啦，输入 <code>hexo g</code> 生成静态网页，然后输入 <code>hexo s</code> （hexo serve）打开本地服务器：</p><img src="/zh-CN/41cccb40/41cccb40/1114626-77606c3fdfd2f043.png"><p>这样便可以在 <code>http://localhost:4000</code> 预览网站了：</p><img src="/zh-CN/41cccb40/41cccb40/1114626-3de8c569ca663fec.png"><p>使用 <code>Ctrl + C</code> 可以把服务关掉。</p><h2 id="将-hexo-与-github-关联起来"><a href="#将-hexo-与-github-关联起来" class="headerlink" title="将 hexo 与 github 关联起来"></a>将 hexo 与 github 关联起来</h2><p>首先输入如下命令，配置 Git 的环境：</p><pre class="line-numbers language-sh"><code class="language-sh">$ git config --global user.name  xinetzone$ git config --global user.email xinzone@outlook.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>用户名和邮箱根据你注册 github 的信息自行修改。然后生成密钥 SSH key：</p><pre class="line-numbers language-sh"><code class="language-sh">$ ssh-keygen -t rsa -C "xinzone@outlook.com"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看 <code>id_rsa.pub</code>：</p><pre class="line-numbers language-sh"><code class="language-sh">$ cat ~/.ssh/id_rsa.pub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打开你自己的 github，在头像下面点击 <code>settings</code>，再点击 <code>SSH and GPG keys</code>，新建一个SSH，名字随便，然后将 <code>id_rsa.pub</code> 复制粘贴到指定位置。在 git bash中，查看是否成功：</p><pre class="line-numbers language-sh"><code class="language-sh">$ ssh -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打开博客根目录下的 <code>_config.yml</code> 文件，这是博客的配置文件，在这里你可以修改与博客相关的各种信息。</p><p>将 hexo 部署到 GitHub 修改最后一行的配置：</p><pre class="line-numbers language-sh"><code class="language-sh">deploy:  type: git  repository: https://github.com/xinetzone/xinetzone.github.io.git  branch: master <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其中  <code>repository</code> 可以通过如下方法获取：</p><img src="/zh-CN/41cccb40/41cccb40/1114626-890059e5643e50f7.png"><p><code>repository</code> 修改为你自己的 github 项目地址。接着需要先安装 <code>deploy-git</code>，也就是部署的命令，这样你才能用命令部署到 GitHub。接着 <code>hexo clean</code> 清除了你之前生成的东西，也可以不加。 <code>hexo g</code> 顾名思义，生成静态文章是 <code>hexo generate</code> 的缩写 <code>hexo deploy</code> 部署文章，可以用 <code>hexo d</code> 缩写：</p><pre class="line-numbers language-sh"><code class="language-sh">$ npm install hexo-deployer-git --save$ hexo clean | hexo g | hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这时打开你的 github.io（<a href="https://xinetzone.github.io/">https://xinetzone.github.io/</a>） 主页就能看到发布的文章：</p><img src="/zh-CN/41cccb40/41cccb40/1114626-761726a5770eea11.png"><p>为了添加博客，需要：</p><pre class="line-numbers language-sh"><code class="language-sh">$ hexo new post "博客名"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后打开 <code>blog\source\_posts</code> 的目录，可以发现下面多了一个文件夹和一个 <code>.md</code> 文件，一个用来存放你的图片等数据，另一个就是你的文章文件啦。</p><h2 id="备份博客源文件"><a href="#备份博客源文件" class="headerlink" title="备份博客源文件"></a>备份博客源文件</h2><p>将本地的 <code>hexo</code> 分支推送到远程：</p><pre class="line-numbers language-sh"><code class="language-sh">$ git add .$ git commit -m "hexo init"$ git push origin hexo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="自定义博客的个人信息"><a href="#自定义博客的个人信息" class="headerlink" title="自定义博客的个人信息"></a>自定义博客的个人信息</h2><p>首先删除 hexo 自动生成的 <code>docs/source/_posts/hello-world.md</code> 文档，然后使用如下命令创建属于自己的博客，比如：</p><pre class="line-numbers language-sh"><code class="language-sh">$ cd docs$ hexo new post "Hexo + vscode + github pages 搭建属于自己的博客"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样便会在目录 <code>docs/source/_posts/</code> 下面生成 <code>Hexo-vscode-github-pages-搭建属于自己的博客.md</code> 文档，接着只需要在此文档中填充内容即可。在文章开头可以配置文档的布局：</p><pre><code>---title: Hexo + vscode + github pages 搭建属于自己的博客date: 2019-09-01 19:37:09categories: 教程 #文章文类tags: [hexo, github] #文章标签，多于一项时用这种格式---</code></pre><h2 id="修改-config-yml-匹配个人需求"><a href="#修改-config-yml-匹配个人需求" class="headerlink" title="修改 _config.yml 匹配个人需求"></a>修改 <code>_config.yml</code> 匹配个人需求</h2><pre class="line-numbers language-yml"><code class="language-yml"># Sitetitle: 刘新伟的技术博客专栏 # 标题subtitle: # 子标题description: # 站点描述，给搜索引擎看的keywords: # 关键字author: 刘新伟language: zh-CNtimezone: Asia/Shanghai # 时区<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，<code>description</code> 主要用于 SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。<code>author</code> 参数用于主题显示文章的作者。</p><p>为了博客可以支持图片的上传需要修改 <code>_config.yml</code>：</p><pre class="line-numbers language-yml"><code class="language-yml">post_asset_folder: true # true 支持图片本地上传<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果你的 Hexo 项目中只有少量图片，那最简单的方法就是将它们放在 <code>/docs/source/images</code> 文件夹中。然后通过类似于 <code>![](/images/image.jpg)</code>的方法访问它们，详细内容参考<a href="https://hexo.io/zh-cn/docs/asset-folders.html" target="_blank" rel="noopener">资源文件夹</a>。</p><p>通过常规的 markdown 语法和相对路径来引用图片和其它资源可能会导致它们在存档页或者主页上显示不正确。随着 Hexo 3 的发布，许多新的标签插件被加入到了核心代码中。这使得你可以更简单地在文章中引用你的资源。</p><pre class="line-numbers language-md"><code class="language-md">{% asset_path slug %}{% asset_img slug [title] %}{% asset_link slug [title] %}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>设置好之后便可以正常显示结果：</p><img src="/zh-CN/41cccb40/41cccb40/2019-09-01-170438.png" title="显示"><p>可以看出，此时的标题与字体均发生了改变。</p><p><strong>注意</strong>：<code></code> 中的 <code>title</code> 不可以为空值，如果想要省略，可以这样：<code></code>，即使用空格代替 <code>title</code>（注意 <code>slug</code> 后面有两个空格）。</p><p>如果在执行 <code>hexo deploy</code> 后,出现 error deployer not found:github 的错误，请执行：</p><pre class="line-numbers language-sh"><code class="language-sh">$ npm install hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github pages </tag>
            
            <tag> hexo </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
